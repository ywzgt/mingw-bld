#!/bin/bash
set -e
start=$PWD
for a; do
case "$1" in
	aarch64|armv7|i686|x86_64)
		ARCH=$1; shift
		[ $ARCH = x86_64 ] || sed -i 's/7zip//' mkpkgs
		;;
	arch|gcc|llvm)
		[ $1 = arch ] && ARCH_ROOTFS=1 || TOOLCHAIN=$1
		SUFFIX=-$1; shift
		;;
esac
done

git_source() {
	local url=$1
	local branch=$2
	if [[ -z $branch ]]; then
		git clone --depth=1 "$url"
	else
		git clone --depth=1 "$url" -b "$branch"
	fi
	url=${url##*/}
	ln -sf ${url%.git} src
}

for i in $PWD/*/SRC; do
	cd $(dirname $i)
	while read -r p u b; do
		if [[ $p == git && -n $u ]]; then
			git_source "$u" "$b"
		fi
		[[ $p != git ]] || continue
		f=$(basename $p)
		[[ -f $f ]] || wget -nv -c $p
		case "$f" in
			*.sig|*.asc|*.sign)
				SIGNS+=($PWD/$f)
				;;
			*.tar.*|*.tar)
				tar xf $f
				ln -sf $(tar tf $f 2>/dev/null|head -1|sed 's@^./@@;s@/.*@@') src
				;;
			*.zip|*.7z|*.rar)
				7z x $f
				;;
		esac
	done < SRC
done

if [[ -n ${SIGNS[@]} ]]; then
	for s in ${SIGNS[@]}; do
		cd $(dirname $s)
		if [[ -f ${s%.*} ]]; then
			gpg --verify \
				--auto-key-retrieve \
				--keyserver hkps://keyserver.ubuntu.com ${s##*/}
		fi
	done
fi

cd $start
[ ! -d rootfs ] || exit

mkdir ../bld; cp -a * ../bld
sudo install -do $(id -u) -g $(id -g) rootfs/build
mv ../bld/* rootfs/build

if [[ $ARCH_ROOTFS ]]; then
	wget -nv -c https://mirrors.edge.kernel.org/archlinux/iso/latest/archlinux-bootstrap-x86_64.tar.zst{,.sig}
	gpg --verify --auto-key-retrieve --keyserver hkps://keyserver.ubuntu.com \
		archlinux-bootstrap-x86_64.tar.zst.sig
	sudo tar -xf archlinux-bootstrap-x86_64.tar.zst --strip-components=1 -C rootfs
	sudo sed -i '/kernel.org/s/^#//' rootfs/etc/pacman.d/mirrorlist
	sudo sed -i 's/CheckSpace/#&/;/^#\(Color\|VerbosePkgLists\|ParallelDownloads\)/s/^#//' rootfs/etc/pacman.conf
else
	if [[ $TOOLCHAIN == gcc ]]; then
		wget -q https://api.github.com/repos/$GITHUB_ACTOR/mingw-gcc/releases/latest
		URL=$(grep browser_download_url latest | grep -o "https://.*mingw-gcc-.*-posix-ucrt-$ARCH.tar.xz")
	else
		wget -q https://api.github.com/repos/$GITHUB_ACTOR/llvm-toolchain/releases/latest
		URL="$(grep browser_download_url latest | grep -o 'https://.*.xz' | sed '/musl\|uclibc/d')"
		URL+=" https://github.com/$GITHUB_ACTOR/llvm-mingw-rt/releases/latest/download/llvm-mingw-rt-ucrt-$ARCH.tar.xz"
	fi
	wget -nv -c https://github.com/$GITHUB_ACTOR/alfs-sysroot/releases/latest/download/rootfs.tar.xz{,.sha256} $URL
	sha256sum -c rootfs.tar.xz.sha256
	echo " -> Extracting the 'rootfs.tar.xz'..."
	sudo tar xf rootfs.tar.xz -C rootfs
	for i in $URL; do
		echo " -> Extracting the '$(basename $i)'..."
		sudo tar xf "$(basename $i)" -C rootfs
	done
fi
sudo cp /etc/resolv.conf rootfs/etc/
sudo mount -v --bind /dev rootfs/dev
sudo mount -v --bind /dev/pts rootfs/dev/pts
sudo mount -vt proc proc rootfs/proc
sudo mount -vt sysfs sysfs rootfs/sys
sudo mount -vt tmpfs tmpfs rootfs/run
sudo mount -vt tmpfs tmpfs rootfs/tmp
if [ -h rootfs/dev/shm ]; then sudo mkdir -pv rootfs/$(readlink rootfs/dev/shm); else sudo mount -vt tmpfs -o nosuid,nodev devshm rootfs/dev/shm; fi

chroot_run() {
	sudo chroot rootfs \
		/usr/bin/env -i HOME=/root \
		TERM=$TERM PATH=/usr/bin:/usr/sbin \
		/bin/bash --login -c "$*"
}

if [[ $ARCH_ROOTFS ]]; then
	chroot_run pacman-key --init
	chroot_run pacman-key --populate
	chroot_run pacman -Syu --noconfirm base-devel mingw-w64 cmake meson p7zip

	URL="https://github.com/$GITHUB_ACTOR/arch-mingw64/releases/latest/download"
	if wget -q $URL/mingw.db; then
		sudo sed -i '/^\[core\]$/i\[mingw]\nSigLevel = Optional TrustAll\nServer = %SERVER%\n' rootfs/etc/pacman.conf
		sudo sed -i "s|%SERVER%$|$URL|" rootfs/etc/pacman.conf
		chroot_run pacman -Syu --noconfirm
	fi
fi

if [[ $ARCH != i?86 && $ARCH != x86_64 ]]; then
	sed -i 's/-mtune=[a-z0-9]\+\s//' envars.sh
fi
if [[ $1 == manual ]]; then
	URL="https://github.com/$GITHUB_REPOSITORY/releases/latest/download/all-$ARCH$SUFFIX.tar.xz"
	source ./envars.sh ${ARCH}
	sudo install -d rootfs/${PREFIX}; ln -sr rootfs ~
	wget -qO- "$URL" | xz -d | sudo tar -xC rootfs/${PREFIX} || true
fi

install -m755 /dev/stdin ./chroot_run <<-"EOF"
	sudo chroot rootfs \
		/usr/bin/env -i HOME=/root \
		TERM=$TERM PATH=/usr/bin:/usr/sbin \
		/bin/bash --login -c "cd /build; $*"
EOF
